// React
import React from 'react';
// Router
import { withRouter, Link } from 'react-router-dom';
// React Select
import Select from 'react-select'
// React Select Creatable
import Creatable from 'react-select/creatable';
// Layout
import DashboardLayout from "screens/Layouts/DashboardLayout";
// Loader
import PlaceholderLoader from 'components/ui/placeholder-loader/placeholder-loader';
// Helpers
import { setTitle, modal, uuidV4, nullIfEmpty, programLifecycleRoute, swalConfirmationPopup } from "helpers/common";
// Network Helpers
import { httpGet, apify, httpPost } from 'helpers/network';
// Program
import Program from 'models/Program';
// jQuery
const jQuery = window.jQuery;

// Threat Analysis & Assesment Screen
class TARAScreen extends React.Component {
  //
  state = {
    loading: true,
    programUuid: undefined,
    program: undefined,
    configuration: undefined,
    threats: undefined,
    assets: undefined,
    property: undefined,

    securityPropertyOption: undefined,
    cyberSecurityImpactRatings: {},

    activeThreat: undefined,

    wp24Annex5Options: [],
    wp24Annex5Scenarios: [],

    threatTypes: [],

    attackTypes: [],
    defaultAttackType: {},

    currentConfigureStep: {}
  };

  //
  prepareThreatTypes = (types) => {
    let threatTypes = [];
    types.forEach(type => {
      threatTypes.push({
        label: type,
        value: type,
      });
    });
    return threatTypes;
  }

  //
  prepareWp24Annex5Options = (conf) => {
    var types = conf['Types'];
    var options = [];

    types.forEach(type => {
      options.push({
        label: type['Title'],
        value: type['Title'],
        scenarios: type['Internal-Types'],
      })
    });

    return options;
  }

  //
  addAttackStep = () => {

    this.setState({
      currentConfigureStep: null
    }, () => {
      modal('#ModalAddAttackStep', {
        show: true,
      });
    })

  }

  //
  onChangeWp24Annex5Options = (ev) => {
    var scenarios = ev['scenarios'];
    var wp24Annex5Scenarios = [];

    scenarios.forEach(scenario => {
      wp24Annex5Scenarios.push({
        label: scenario,
        value: scenario,
      })
    });

    var activeThreat = this.state.activeThreat;
    activeThreat['Type-WP24-Annex-5'] = ev['value'];

    this.setState({
      activeThreat: activeThreat,
      wp24Annex5Scenarios: wp24Annex5Scenarios
    });
  }

  //
  onChangeWp24Annex5Scenarios = (ev) => {
    var activeThreat = this.state.activeThreat;
    activeThreat['Threat-Sub-Scenario'] = ev['value'];
    this.setState({
      activeThreat: activeThreat
    });
  }

  //
  onChangeThreatType = (ev) => {
    var activeThreat = this.state.activeThreat;
    activeThreat['Threat-Type'] = ev;
    this.setState({
      activeThreat: activeThreat
    });

  }

  //
  onChangeAttackType = (ev) => {
  }

  //
  updateThreat = (key, updateObject) => {
  }

  //
  prepareAssetOptions = (threats) => {
    var assetArray = [];
    threats['Items'].forEach(item => {
      if (item['Identified']) {

        //
        var securityPropertyOptions = [];

        if (!item['Additional-Vulnerability-Attacks']) {
          item['Additional-Vulnerability-Attacks'] = {};
        }

        item['Cyber-Security-Properties'].forEach(securityProperty => {
          securityPropertyOptions.push({
            label: securityProperty,
            value: securityProperty,
          });



          if (!item['Additional-Vulnerability-Attacks'][securityProperty] || item['Additional-Vulnerability-Attacks'][securityProperty].length <= 0) {
            item['Additional-Vulnerability-Attacks'][securityProperty] = [{
              'RefId': uuidV4(),
              'Threat-Identified': false,
              'Security-Objective': item['Security-Objective'],
              'Impact-Ratings': {
                'Safety': null,
                'Finanical': null,
                'Operational': null,
                'Privacy': null,
              },
              'Impact-Rating-Value': null,
              'Type-WP24-Annex-5': null,
              'Threat-Sub-Scenario': null,
              'Threat-Type': null,
              'Attack-Type': 'Vulnerability',
              'Attack-RefId': uuidV4(),
              'Attack-Steps': [],
              'Attack-Effect': null,
              'Attack-CAL': null,
              'Cyber-Security-Goal': null,
              'Cyber-Security-Requirements': null,
              'Attack-Diagram': {
                'Source-Nodes': [],
                'Source-Links': []
              },
              'Risk-Acceptance': {
                'Type': null,
                'Security-Controls': [],
                'Reduced-Risk-Impact-Rating': [],
                'Reduced-Risk-Ratings': [],
                'Reduced-Risk-Cyber-Security-Requirement': null,
                'Reduced-Risk-Cyber-Security-Claim': null,
                'Reduced-Risk-Cyber-Security-Claim-Document': null,
              },
            }]
          }
        });
        item['Cyber-Security-Properties-Options'] = securityPropertyOptions;


        //
        assetArray.push({
          value: item['RefId'],
          label: item['Name'],
          property: item,
        });

      }
    });
    return assetArray;
  }

  //
  allowedCyberSecurityProperties = () => {
    let allowedSecurityProperties = [];
    let securityProperties = this.state.property['Cyber-Security-Properties'];

    securityProperties.forEach(property => {
      allowedSecurityProperties.push({
        label: property,
        value: property,
      });
    });

    return allowedSecurityProperties;
  }

  //
  onChangeAssetOption = (ev) => {
    this.setState({
      property: ev['property'],
      assetSelected: ev
    });
  }

  //
  onChangeSecurityPropertyOption = (ev) => {
    let property = this.state.property;

    let index = 0
    let activeThreat = property['Additional-Vulnerability-Attacks'][ev['value']][index];
    let vm = this
    //
    this.setState({
      securityPropertyOption: ev,
      activeThreat: activeThreat,
      property: property
    }, () => {

      this.state.wp24Annex5Options.map(data => {

        if (data.label === activeThreat['Type-WP24-Annex-5']) {

          var scenarios = data['scenarios'];
          var wp24Annex5Scenarios = [];

          scenarios.forEach(scenario => {
            wp24Annex5Scenarios.push({
              label: scenario,
              value: scenario,
            })
          });

          vm.setState({
            wp24Annex5Scenarios: wp24Annex5Scenarios
          }, () => {
            // (Take reference from memory for previous entries)
            let impactRatingMaster = ["Safety", "Finanical", "Operational", "Privacy"];
            impactRatingMaster.forEach(masterName => {
              var ele = document.getElementsByName(masterName);
              for (var i = 0; i < ele.length; i++) {

                if (ele[i].value === activeThreat['Impact-Ratings'][masterName]) {
                  ele[i].checked = true;
                } else {
                  ele[i].checked = false;
                }
              }
            })
          })

        }

        return true
      })


      //


    });
  }

  //
  onChangeImpactRatingRadio = (ev) => {
    let { name, value } = ev.target;
    var cyberSecurityImpactRatings = this.state.cyberSecurityImpactRatings;
    var activeThreat = this.state.activeThreat;

    cyberSecurityImpactRatings.forEach((rating, idx) => {
      if (rating['type'] === name) {
        rating['value'] = value;
        cyberSecurityImpactRatings[idx] = rating;
        activeThreat['Impact-Ratings'][name] = value;
      }
    });

    this.setState({
      cyberSecurityImpactRatings: cyberSecurityImpactRatings,
      activeThreat: activeThreat
    }, () => {
      this.calculateThreatImpactRating();
    });
  }

  // Calculate Impact Rating (TR)
  calculateThreatImpactRating = async () => {
    var canHaveImpactRating = true;
    var activeThreat = this.state.activeThreat;

    //
    for (let type in activeThreat['Impact-Ratings']) {
      if (activeThreat['Impact-Ratings'][type] === null) {
        canHaveImpactRating = false;
      }
    }

    //
    if (canHaveImpactRating) {

      let impactRating = await window.ProgramObject.calculateImpactRating(activeThreat['Impact-Ratings']);
      activeThreat['Impact-Rating-Value'] = impactRating['Impact'];



      for (let i = 0; i < activeThreat['Attack-Steps'].length; i++) {
        let step = activeThreat['Attack-Steps'][i]
        activeThreat['Attack-Steps'][i]['Attack-Step-Impact-Rating'] = impactRating['Impact']

        let params = {
          [`Elapsed-Time-${step['Attack-Step-Elapsed-Time']}`]: step['Attack-Step-Elapsed-Time'],
          [`Equipment-Effort-${step['Attack-Step-Equipment-Effort']}`]: step['Attack-Step-Equipment-Effort'],
          [`Knowledge-Of-Item-${step['Attack-Step-Knowledge-Of-Item']}`]: step['Attack-Step-Knowledge-Of-Item'],
          [`Specialist-Expertise-${step['Attack-Step-Specialist-Expertise']}`]: step['Attack-Step-Specialist-Expertise'],
          [`Window-Of-Opportunity-${step['Attack-Step-Window-Of-Opportunity']}`]: step['Attack-Step-Window-Of-Opportunity']
        }

        let attackStepFeasibility = await window.ProgramObject.calculateAttackStepFeasibilityRating(params, impactRating['Impact']);

        activeThreat['Attack-Steps'][i]['Attack-Step-Risk-Rating'] = attackStepFeasibility['Risk-Value']['Value']


        let calLevel = await window.ProgramObject.calculateCalLevel(activeThreat);
        activeThreat['Attack-CAL'] = calLevel;
        activeThreat['Attack-Feasibility-Rating'] = await window.ProgramObject.calculateFeasibilityRating(activeThreat);
        activeThreat['Attack-Risk-Value'] = await window.ProgramObject.calculateRiskvalue(activeThreat);
        jQuery('#Cyber-Security-Assurance-Level-Rating').text(calLevel['Value']);




      }

      this.setState({
        activeThreat: activeThreat
      }, () => {
        jQuery('.Impact-Rating-Color').css({
          'backgroundColor': impactRating['Color'],
        });
      });
    }

    //
  }

  //
  impactRatingRadioValue = (type, value) => {
    var hasValue = false;
    var cyberSecurityImpactRatings = this.state.cyberSecurityImpactRatings;
    cyberSecurityImpactRatings.forEach(rating => {
      if (!hasValue && rating['type'] === type && rating['value'] === value) {
        hasValue = true;
      }
    });
    return hasValue;
  }

  //
  configureAttackStep = (ev, attackStepRefId, step) => {
    ev.preventDefault();
    // alert(attackStepRefId);

    this.setState({
      currentConfigureStep: step
    }, () => {
      modal('#ModalAddAttackStep', {
        show: true,
      });
    })

  }

  //
  deleteAttackStep = (ev, attackStepRefId, step) => {
    ev.preventDefault();
    // alert(attackStepRefId);

    //
    var vm = this;
    //
    swalConfirmationPopup({
      title: null,
      text: "This action will remove the step in threat.",
      confirmButtonText: "Remove",
    }, () => {


      let activeThreat = vm.state.activeThreat

      activeThreat['Attack-Steps'] = activeThreat['Attack-Steps'].filter((attackstep, key) => step['Attack-Step-RefId'] !== attackstep['Attack-Step-RefId'])

      vm.setState({
        activeThreat: activeThreat
      }, () => {

      })

    });


  }

  //
  registerUiTasks = () => {
    //
    var vm = this;

    //
    jQuery('#ModalAddAttackStep').on('shown.bs.modal', function () {
      //
      jQuery('#Modal-Input-Attack-Step').trigger('focus')

      //
      jQuery('.alert-attack-value').text('');

      //
      if (vm.state.activeThreat['Attack-Steps'].length > 0) {
        jQuery('#Modal-Input-Attack-Logic-Container').show();
      } else {
        jQuery('#Modal-Input-Attack-Logic-Container').hide();
      }


      if (!vm.state.currentConfigureStep || !vm.state.currentConfigureStep['Attack-Step-RefId']) {
        //
        jQuery('#Form-Modal-Add-Attack-Step').trigger('reset');

        //
        jQuery('.input-attack-step-feasibility-ratings').trigger('change');
      } else {
        vm.calculateAttackStepFeasibilityRating();
      }


    });

    //
    jQuery('body').on('change', '.input-attack-step-feasibility-ratings', function () {
      vm.calculateAttackStepFeasibilityRating();
    });
  }

  // Calculate Attack Step Feasibility Rating
  calculateAttackStepFeasibilityRating = async () => {
    //
    let params = {};

    //
    jQuery('.input-attack-step-feasibility-ratings').each(function (idx, self) {
      let selectName = jQuery(this).attr('name');
      let optionValue = jQuery(this).val();
      let inputKey = `${selectName}-${optionValue}`;

      if ((selectName !== undefined) && (optionValue !== undefined) && inputKey) {
        params[inputKey] = optionValue;
      }

    });


    //
    let impactRating = this.state.activeThreat['Impact-Rating-Value'];
    let attackStepFeasibility = await window.ProgramObject.calculateAttackStepFeasibilityRating(params, impactRating);

    //
    jQuery('#Modal-Input-Attack-Feasibility-Rating').text(attackStepFeasibility['Impact']);
    jQuery('#Modal-Input-Attack-Feasibility-Rating').closest('.alert').css({
      'background': attackStepFeasibility['Color'],
    });

    //
    jQuery('#Modal-Input-Impact-Rating').text(attackStepFeasibility['Impact-Rating']['Value']);
    jQuery('#Modal-Input-Impact-Rating').closest('.alert').css({
      'background': attackStepFeasibility['Impact-Rating']['Color'],
    });

    //
    jQuery('#Modal-Input-Risk-Rating').text(attackStepFeasibility['Risk-Value']['Value']);
    jQuery('#Modal-Input-Risk-Rating').closest('.alert').css({
      'background': attackStepFeasibility['Risk-Value']['Color'],
    });

  }

  //
  onSubmitAddAttackStep = async (ev) => {
    ev.preventDefault();

    var vm = this;

    let attackStepLogic = (this.state.activeThreat['Attack-Steps'].length > 0) ? jQuery('#Modal-Input-Attack-Logic').val() : null;

    let attackStep = {
      'Attack-Step': jQuery('#Modal-Input-Attack-Step').val(),
      'Attack-Step-RefId': uuidV4(),
      'Attack-Step-Logic': attackStepLogic,
      'Attack-Step-Description': jQuery('#Modal-Input-Attack-Description').val(),
      'Attack-Step-Specialist-Expertise': jQuery('#Modal-Input-Attack-Specialist-Expertise').val(),
      'Attack-Step-Window-of-Opportunity': jQuery('#Modal-Input-Attack-Window-of-Opportunity').val(),
      'Attack-Step-Attack-Equipment': jQuery('#Modal-Input-Attack-Equipment').val(),
      'Attack-Step-Attack-Elapsed-Time': jQuery('#Modal-Input-Attack-Elapsed-Time').val(),
      'Attack-Step-Knowledge-of-Item': jQuery('#Modal-Input-Attack-Knowledge-of-Item').val(),
      'Attack-Step-Attack-Feasibility-Rating': jQuery('#Modal-Input-Attack-Feasibility-Rating').text(),
      'Attack-Step-Impact-Rating': jQuery('#Modal-Input-Impact-Rating').text(),
      'Attack-Step-Risk-Rating': jQuery('#Modal-Input-Risk-Rating').text(),
    };

    //
    var activeThreat = this.state.activeThreat;

    //
    if (this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-RefId']) {
      activeThreat['Attack-Steps'].map((step, key) => {
        if (step['Attack-Step-RefId'] === this.state.currentConfigureStep['Attack-Step-RefId']) {
          attackStep['Attack-Step-RefId'] = this.state.currentConfigureStep['Attack-Step-RefId'];
          activeThreat['Attack-Steps'][key] = attackStep;
        }
        // `array-callback-return`, remove below `return` if something is broken. 
        return true;
      });
    } else {
      activeThreat['Attack-Steps'].push(attackStep);
    }

    //
    let calLevel = await window.ProgramObject.calculateCalLevel(activeThreat);
    activeThreat['Attack-CAL'] = calLevel;

    activeThreat['Attack-Feasibility-Rating'] = await window.ProgramObject.calculateFeasibilityRating(activeThreat);
    activeThreat['Attack-Risk-Value'] = await window.ProgramObject.calculateRiskvalue(activeThreat);

    vm.setState({
      activeThreat: activeThreat,
      currentConfigureStep: null
    }, async () => {
      modal('#ModalAddAttackStep', 'hide');

      jQuery('#Cyber-Security-Assurance-Level-Rating').text(calLevel['Value']);

    });
  }

  //
  canDefineAttackSteps = () => {
    var activeThreat = this.state.activeThreat;
    return (
      (activeThreat['Threat-Sub-Scenario'] !== null) &&
      (activeThreat['Threat-Type'] !== null)
    );
  }

  //
  identifyThreat = () => {
    var vm = this;
    let activeThreat = vm.state.activeThreat;

    activeThreat['Attack-Effect'] = jQuery('#Input-Effect-of-Attack').val();
    activeThreat['Cyber-Security-Goal'] = jQuery('#Input-Security-Objective').val();
    activeThreat['Cyber-Security-Requirements'] = jQuery('#Input-Cyber-Security-Requirements').val();
    activeThreat['Updated-Security-Objective'] = jQuery('#Updated-Security-Objective').val();
    activeThreat['Updated-Damage-Scenario'] = jQuery('#Updated-Damage-Scenario').val();

    vm.setState({
      activeThreat: activeThreat
    }, async () => {
      await vm.postThreatAtServer();
    })
  }

  //
  postThreatAtServer = async () => {

    var vm = this;

    httpPost(apify('app/program/threats/add-vulnerability'), {
      programUuid: vm.state.programUuid,
      threats: vm.state.property,
    }).then(res => {
      if (res['success']) {
        window.location.reload(false);
      }
    });

  }

  //
  preSimulateAttackSteps = (ev) => {
    ev.preventDefault();
    modal('#ModalPresimulateAttackSteps', {
      show: true,
    });
  }

  //
  threatRemoveFromIdentificationArray = (refId) => {



    //
    var vm = this;
    //
    swalConfirmationPopup({
      title: null,
      text: "This action will reset the threat metadata.",
      confirmButtonText: "Re-configure",
    }, () => {

      vm.setState({
        loading: true
      }, () => {


        let data = {}
        let currentItem = {}
        let assetSelected = undefined
        this.state.threats['Items'].map(item => {
          if (item['Additional-Vulnerability-Attacks']) {
            Object.values(item['Additional-Vulnerability-Attacks']).map(object => {
              object.map(attack => {
                if (attack['RefId'] === refId) {
                  data = attack
                  attack['Threat-Identified'] = false

                  currentItem = item
                }
                return null
              })
              return null
            })
          }
          return null
        })


        let threats = this.state.threats
        let assets = vm.prepareAssetOptions(threats);
        let property = undefined
        let securityPropertyOption = {
          label: data['Parent-Cyber-Security'],
          value: data['Parent-Cyber-Security'],
        }



        assets.map(asset => {

          if (asset['value'] === currentItem['RefId']) {
            property = asset['property']
            assetSelected = asset
          }

          return null

        })

        vm.setState({
          loading: false,
          assets: assets,
          threats: threats,
          activeThreat: data,
          property: property,
          assetSelected: assetSelected,
          canGotoNextPhase: false,
        }, () => {
          this.onChangeSecurityPropertyOption(securityPropertyOption)
        })
      });

    });

  }

  //
  async componentDidMount() {
    //
    setTitle("Vulnerability Risk Assesment");

    //
    jQuery('.select').selectpicker('refresh');

    //
    let { programUuid } = this.props['match']['params'];
    let { vulnerabilityUuid } = this.props['match']['params'];

    //
    this.setState({
      programUuid: programUuid,
      vulnerabilityUuid: vulnerabilityUuid,
    });

    var vm = this;

    httpGet(apify(`app/program/threats?programUuid=${programUuid}`)).then(res => {
      let threats = res['program']['threats'];
      let assets = vm.prepareAssetOptions(threats);
      let wp24Annex5Options = vm.prepareWp24Annex5Options(res['configuration']['WP24-Annex-5-Options']);
      let threatTypes = vm.prepareThreatTypes(res['configuration']['Threat-Types']);

      let attackTypes = [
        { label: "Vulnerability", value: "Vulnerability" },
      ];
      let defaultAttackType = attackTypes[0];


      vm.setState({
        loading: false,
        program: res['program'],
        threats: threats,
        configuration: res['configuration'],
        assets: assets,
        wp24Annex5Options: wp24Annex5Options,
        threatTypes: threatTypes,
        attackTypes: attackTypes,
        defaultAttackType: defaultAttackType,
        canGotoNextPhase: false,
      }, () => {

      });
    }).catch(err => {
      vm.setState({
        loading: false,
        program: null,
      }, () => {
        console.error(err);
      });
    });

    //
    let cyberSecurityImpactRatingValues = [
      'Negligible',
      'Moderate',
      'Major',
      'Severe',
    ];

    //
    let cyberSecurityImpactRatings = [
      {
        type: 'Safety',
        title: 'Safety',
        types: cyberSecurityImpactRatingValues,
        weight: {
          'Negligible': 0,
          'Moderate': 10,
          'Major': 100,
          'Severe': 1000,
        },
        value: null,
      },
      {
        type: 'Finanical',
        title: 'Finanical',
        types: cyberSecurityImpactRatingValues,
        weight: {
          'Negligible': 0,
          'Moderate': 10,
          'Major': 100,
          'Severe': 1000,
        },
        value: null,
      },
      {
        type: 'Operational',
        title: 'Operational',
        types: cyberSecurityImpactRatingValues,
        weight: {
          'Negligible': 0,
          'Moderate': 1,
          'Major': 10,
          'Severe': 100,
        },
        value: null,
      },
      {
        type: 'Privacy',
        title: 'Privacy & Legislation',
        types: cyberSecurityImpactRatingValues,
        weight: {
          'Negligible': 0,
          'Moderate': 1,
          'Major': 10,
          'Severe': 100,
        },
        value: null,
      },
    ];

    //
    vm.setState({
      cyberSecurityImpactRatings: cyberSecurityImpactRatings
    }, () => {
      vm.registerUiTasks();
    });


    //
    window.ProgramObject = new Program({ 'programUuid': programUuid });

    //
    // vm.addAttackStep();

    // Configure existing threat
    jQuery('body').on('click', '.identified-threat-configure-button', function (ev) {
      ev.preventDefault();
      let refId = jQuery(this).attr('data-ref-id');
      vm.threatRemoveFromIdentificationArray(refId);
    });
  }

  // UI
  render() {
    return (
      <div>
        <DashboardLayout>
          <div className="container-fluid">
            <div className="row">
              <div className="col-12">
                {
                  this.state.loading &&
                  <PlaceholderLoader />
                }

                {
                  !this.state.loading &&
                  <div>
                    {
                      !this.state.program &&
                      <div className="alert alert-warning text-white p-3">
                        <h3>Alert!</h3>
                        No such program in our system.
                      </div>
                    }
                  </div>
                }
              </div>
            </div>

            {
              !this.state.loading &&
              <div>
                {
                  this.state.program &&
                  <div className="row">
                    <div className="col-12 col-md-12">
                      {
                        (!this.state.canGotoNextPhase) &&
                        <div className="card">
                          <div className="card-header">
                            <h3>Vulnerability Risk Assesment</h3>
                            <small>Program</small> <br />
                            <Link to={programLifecycleRoute('VIEW', this.state.program['uuid'])}>
                              {this.state.program['name']}
                            </Link>
                          </div>
                          <div className="card-body">

                            <div className="row">
                              <div className="col-4">
                                Assets
                              </div>
                              <div className="col-6">
                                <Select
                                  options={this.state.assets}
                                  onChange={(ev) => this.onChangeAssetOption(ev)}
                                  menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}
                                  value={this.state.assetSelected}
                                />
                              </div>
                            </div>

                            {
                              (this.state.property !== undefined) &&
                              <div>

                                <div className="row my-3">
                                  <div className="col-4">
                                    Security Objective
                                  </div>
                                  <div className="col-6">
                                    <span className="input-readonly">{this.state.property['Security-Objective']['Value']}</span>
                                  </div>
                                </div>

                                <div className="row my-3">
                                  <div className="col-4">
                                    Description of Damage Scenario
                                  </div>
                                  <div className="col-6">
                                    <span className="input-readonly">{this.state.property['Damage-Scenario']['Value']}</span>
                                  </div>
                                </div>

                                <div className="row my-3">
                                  <div className="col-4">
                                    Updated Security Objective
                                  </div>
                                  <div className="col-6">
                                    <input className="form-control md-form-control" placeholder="Updated Security Objective" id="Updated-Security-Objective" defaultValue={this.state.property['Updated-Security-Objective'] ? this.state.property['Updated-Security-Objective'] : this.state.property['Security-Objective']['Value']} />
                                  </div>
                                </div>

                                <div className="row my-3">
                                  <div className="col-4">
                                    Updated  Description of Damage Scenario
                                  </div>
                                  <div className="col-6">
                                    <input className="form-control md-form-control" placeholder="Updated Description of Damage Scenario" id="Updated-Damage-Scenario" defaultValue={this.state.property['Updated-Damage-Scenario'] ? this.state.property['Updated-Damage-Scenario'] : this.state.property['Damage-Scenario']['Value']} />
                                  </div>
                                </div>

                                <div className="row my-3">
                                  <div className="col-12">
                                    <hr />
                                  </div>
                                </div>

                                <div className="row my-3">
                                  <div className="col-3">
                                    <b className="highlight-label">Cyber Security Violated</b>
                                  </div>
                                  <div className="col-3">
                                    <Select
                                      options={this.allowedCyberSecurityProperties()}
                                      onChange={(ev) => this.onChangeSecurityPropertyOption(ev)}
                                      menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}
                                      value={this.state.securityPropertyOption}
                                    />
                                  </div>

                                  {
                                    this.state.securityPropertyOption &&
                                    <div className="col-3 py-2">
                                      <h5 className="text-danger text-uppercase">Impact Rating</h5>
                                    </div>
                                  }

                                  {
                                    this.state.securityPropertyOption &&
                                    this.state.activeThreat['Impact-Rating-Value'] === null &&
                                    <div className="col-3">
                                      <span className="badge badge-dark px-4 py-2">N/A</span>
                                    </div>
                                  }

                                  {
                                    this.state.securityPropertyOption &&
                                    this.state.activeThreat['Impact-Rating-Value'] !== null &&
                                    <div className="col-3">
                                      <span className="badge px-4 py-2 Impact-Rating-Color">{this.state.activeThreat['Impact-Rating-Value']}</span>
                                    </div>
                                  }
                                </div>

                                {
                                  this.state.securityPropertyOption &&
                                  <div>
                                    <div className="row my-3">
                                      <div className="col-12 mb-2">
                                        <b>Asset Impact Ratings</b>
                                      </div>

                                      {
                                        this.state.cyberSecurityImpactRatings.map(impactRating => {
                                          return (
                                            <div key={impactRating['title']} className="col-3">
                                              <b className="text-muted">{impactRating['title']}</b>
                                              <div className="form-group">
                                                <ul className="list-unstyled">
                                                  {
                                                    impactRating['types'].map(type => {
                                                      return (
                                                        <li key={type} className="impact-rating-radio">
                                                          <input type="radio" name={impactRating['type']} value={type} defaultChecked={this.impactRatingRadioValue(impactRating['type'], type)} onChange={(ev) => this.onChangeImpactRatingRadio(ev)} />
                                                          <label className="ml-2">{type}</label>
                                                        </li>
                                                      );
                                                    })
                                                  }
                                                </ul>
                                              </div>
                                            </div>
                                          );
                                        })
                                      }

                                    </div>

                                    {
                                      this.state.securityPropertyOption &&
                                      this.state.activeThreat['Impact-Rating-Value'] !== null &&
                                      <div>

                                        <div className="row my-3">
                                          <div className="col-12">
                                            <hr />
                                          </div>
                                        </div>

                                        <div className="row my-3">
                                          <div className="col-4">
                                            Threat ID
                                          </div>
                                          <div className="col-8">
                                            <span className="input-readonly">{this.state.activeThreat['RefId']}</span>
                                          </div>
                                        </div>

                                        <div className="row my-3">
                                          <div className="col-4">
                                            Is threat type part of WP29 Annex. 5?
                                          </div>
                                          <div className="col-8">
                                            <Creatable
                                              options={this.state.wp24Annex5Options}
                                              onChange={(ev) => this.onChangeWp24Annex5Options(ev)}
                                              menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}
                                              value={this.state.activeThreat['Type-WP24-Annex-5'] && {
                                                label: this.state.activeThreat['Type-WP24-Annex-5'],
                                                value: this.state.activeThreat['Type-WP24-Annex-5'],
                                              }}
                                            />
                                          </div>
                                        </div>

                                        <div className="row my-3">
                                          <div className="col-4">
                                            Define Threat Sub-scenario
                                          </div>
                                          <div className="col-8">
                                            <Creatable
                                              options={this.state.wp24Annex5Scenarios}
                                              onChange={(ev) => this.onChangeWp24Annex5Scenarios(ev)}
                                              menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}
                                              value={this.state.activeThreat['Threat-Sub-Scenario'] && {
                                                label: this.state.activeThreat['Threat-Sub-Scenario'],
                                                value: this.state.activeThreat['Threat-Sub-Scenario'],
                                              }}
                                            />
                                          </div>
                                        </div>

                                        <div className="row my-3">
                                          <div className="col-4">
                                            Threat Type
                                          </div>
                                          <div className="col-8">
                                            <Select
                                              options={this.state.threatTypes}
                                              onChange={(ev) => this.onChangeThreatType(ev)}
                                              isMulti={true}
                                              menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}
                                              value={this.state.activeThreat['Threat-Type']}

                                            />
                                          </div>
                                        </div>

                                        {/* Attack Definition Starts */}

                                        {
                                          this.canDefineAttackSteps() &&
                                          <div>
                                            <div className="row my-3">
                                              <div className="col-12">
                                                <hr />
                                              </div>
                                            </div>

                                            <div className="row my-3">
                                              <div className="col-3">
                                                Attack Type
                                              </div>
                                              <div className="col-4">
                                                <Select
                                                  options={this.state.attackTypes}
                                                  onChange={(ev) => this.onChangeAttackType(ev)}
                                                  menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}
                                                  value={this.state.defaultAttackType}
                                                  disabled={true}
                                                />
                                              </div>
                                            </div>

                                            <div className="row my-3">
                                              <div className="col-3">
                                                Attack ID
                                              </div>
                                              <div className="col-9">
                                                <span className="input-readonly">{this.state.activeThreat['Attack-RefId']}</span>
                                              </div>
                                            </div>

                                            {/* List of Attack Steps */}
                                            <div className="row my-3">
                                              <div className="col-3">
                                                Attack Steps
                                                <br />
                                                <a href="#!" className="link" onClick={this.preSimulateAttackSteps}>
                                                  <small>Simulate Pre-steps</small>
                                                </a>
                                              </div>

                                              <div className="col-9">
                                                {
                                                  (this.state.activeThreat['Attack-Steps'].length === 0) &&
                                                  <div>
                                                    <button className="btn btn-dark btn-sm text-white mt-2" onClick={this.addAttackStep}>
                                                      <i className="fa fa-plus mr-3"></i>
                                                      Add Your First Step
                                                    </button>
                                                  </div>
                                                }

                                                {
                                                  (this.state.activeThreat['Attack-Steps'].length > 0) &&
                                                  <div className="row">
                                                    <div className="col-12">
                                                      <table className="table table-bordered">
                                                        <thead>
                                                          <tr>
                                                            <th>Attack</th>
                                                            <th>Ratings</th>
                                                            <th>Configure</th>
                                                          </tr>
                                                        </thead>
                                                        <tbody>
                                                          {
                                                            this.state.activeThreat['Attack-Steps'].map(step => {
                                                              return (
                                                                <tr key={step['Attack-Step-RefId']}>
                                                                  <td title={step['Attack-Step-Description']}>
                                                                    {
                                                                      (nullIfEmpty(step['Attack-Step-Logic']) !== null) &&
                                                                      <small className="d-inline mr-1 text-primary">{step['Attack-Step-Logic']}</small>
                                                                    }
                                                                    <span className="text-muted">{step['Attack-Step']}</span>
                                                                  </td>
                                                                  <td>
                                                                    <span className="badge badge-info py-2 px-3 ml-2" title="Attack Feasibility Rating">AFR : {step['Attack-Step-Attack-Feasibility-Rating']}</span>
                                                                    <span className="badge badge-success py-2 px-3 ml-2" title="Impact Rating">IR : {step['Attack-Step-Impact-Rating']}</span>
                                                                    <span className="badge badge-danger py-2 px-3 ml-2" title="Risk Value">RV : {step['Attack-Step-Risk-Rating']}</span>
                                                                  </td>
                                                                  <td>
                                                                    <a href="#!" className="link-sm" onClick={(ev) => this.configureAttackStep(ev, step['Attack-Step-RefId'], step)}>
                                                                      <i className="fa fa-gear"></i> Configure
                                                                    </a>
                                                                    <a href="#!" className="link-sm ml-1" onClick={(ev) => this.deleteAttackStep(ev, step['Attack-Step-RefId'], step)}>
                                                                      <i class="fa fa-trash"></i> Remove
                                                                    </a>
                                                                  </td>
                                                                </tr>
                                                              );
                                                            })
                                                          }
                                                        </tbody>
                                                      </table>
                                                    </div>

                                                    <div className="col-12 my-3">
                                                      <button className="btn btn-dark btn-sm text-white" onClick={this.addAttackStep}>
                                                        <i className="fa fa-plus mr-3"></i>
                                                        Add More Step
                                                      </button>
                                                    </div>




                                                  </div>
                                                }
                                              </div>

                                            </div>

                                            {/* Effect of Attack */}
                                            {
                                              (this.state.activeThreat['Attack-Steps'].length > 0) &&
                                              <div>
                                                <div className="row">
                                                  <div className="col-12">
                                                    <hr />
                                                  </div>
                                                </div>

                                                <div className="row my-3">
                                                  <div className="col-3">
                                                    Effect of Attack
                                                  </div>
                                                  <div className="col-8">
                                                    <input className="form-control md-form-control" placeholder="Effect of Attack" id="Input-Effect-of-Attack" defaultValue={this.state.activeThreat['Attack-Effect']} />
                                                  </div>
                                                </div>

                                                <div className="row my-3">
                                                  <div className="col-3">
                                                    Attack Step <br />
                                                    Cyber Security Assurance Level (CAL)
                                                  </div>
                                                  <div className="col-5">
                                                    <div className="alert alert-primary">
                                                      <span className="alert-attack-type">Cyber Security Assurance Level</span> <br />
                                                      <span id="Cyber-Security-Assurance-Level-Rating" style={{ 'fontSize': '1.3em' }}>{this.state.activeThreat && this.state.activeThreat['Attack-CAL'] && this.state.activeThreat['Attack-CAL']['Value']}</span>
                                                    </div>
                                                  </div>
                                                </div>

                                                <div className="row my-3">
                                                  <div className="col-3">
                                                    Cyber Security Goal
                                                  </div>
                                                  <div className="col-8">
                                                    <input className="form-control md-form-control" defaultValue={this.state.activeThreat['Cyber-Security-Goal'] ? this.state.activeThreat['Cyber-Security-Goal'] : this.state.activeThreat['Updated-Security-Objective']} placeholder="Security Objective" id="Input-Security-Objective" />
                                                  </div>
                                                </div>

                                                <div className="row my-3">
                                                  <div className="col-3">
                                                    Create Cyber Security Requirements
                                                  </div>
                                                  <div className="col-8">
                                                    <input className="form-control md-form-control" defaultValue={this.state.activeThreat['Cyber-Security-Requirements']} placeholder="Cyber Security Requirements" id="Input-Cyber-Security-Requirements" />
                                                  </div>
                                                </div>

                                              </div>
                                            }
                                          </div>
                                        }

                                        {/* Attack Definition ENDS */}

                                      </div>
                                    }
                                  </div>
                                }

                              </div>
                            }

                          </div>
                          <div className="card-footer">
                            <button type="button" className="btn btn-success btn-lg" onClick={(ev) => this.identifyThreat(ev)} disabled={!this.state.activeThreat || this.state.activeThreat['Attack-Steps'].length <= 0}>
                              Mark Threat
                            </button>
                          </div>
                        </div>
                      }

                      {
                        (this.state.canGotoNextPhase) &&
                        <div className="card">
                          <div className="card-header">
                          <h3>Vulnerability Risk Assesment</h3>
                            <small>Program</small> <br />
                            <Link to={programLifecycleRoute('VIEW', this.state.program['uuid'])}>
                              {this.state.program['name']}
                            </Link>
                          </div>
                          <div className="card-body">
                            <div className="row">
                              <div className="col-12">
                                All threats have been identified, you may
                                proceed to <b>Residual Risk phase.</b>
                              </div>
                            </div>
                          </div>
                          <div className="card-footer">
                            <Link to={programLifecycleRoute('Residual-Risk', this.state.program['uuid'])} className="btn btn-success text-white">
                              Goto <b>Residual Risk phase</b>
                            </Link>
                          </div>
                        </div>
                      }

                    </div>

                    {/* Right sidebar */}
                    <div className="col-12 col-md-12 mt-3">
                      <div className="card">
                        <div className="card-header">
                          <h3>Vulnerability Identified</h3>
                        </div>
                        <div className="card-body p-0">
                          <table className="table table-bordered">
                            <thead>
                              <tr>
                                <th>Threat</th>
                                <th></th>
                              </tr>
                            </thead>
                            <tbody>

                              {/* Threats */}
                              {
                                this.state.threats['Items'] && this.state.threats['Items'].map(item => {

                                  return (
                                    item['Additional-Vulnerability-Attacks'] && Object.values(item['Additional-Vulnerability-Attacks']).map(object => {
                                      return (
                                        object.map(threat => {
                                          if (threat['Threat-Identified']) {
                                            return (
                                              <tr key={threat['RefId']}>
                                                <td>
                                                  {threat['Parent-Asset']} <br />
                                                  <small>{threat['Parent-Cyber-Security']}</small>
                                                </td>
                                                <td className="text-right">
                                                  <a href="#!" className="identified-threat-configure-button" data-ref-id={threat['RefId']}>
                                                    <i className="fa fa-gear mr-1"></i>
                                                    Configure
                                                  </a>
                                                </td>
                                              </tr>
                                            )
                                          }
                                          return null
                                        })
                                      )

                                    })
                                  )


                                })
                              }

                            </tbody>
                          </table>




                          <div className="m-2">

                          </div>
                        </div>
                        {
                          <div className="card-footer">
                            <Link to={`/dashboard/cybersecurity/vulnerability-analysis/${this.state.programUuid}?vulnerabilityUuid=${this.state.vulnerabilityUuid}`} className="btn btn-success text-white">
                              Goto <b>Cyber Security Vulnerability Analysis</b>
                            </Link>
                          </div>
                        }
                      </div>
                    </div>
                  </div>
                }
              </div>
            }

          </div>

          {/* Pre-simulate Attack Steps Modal */}
          <div className="modal fade" id="ModalPresimulateAttackSteps" tabIndex="-1" data-keyboard="false" data-backdrop="static">
            <div className="modal-dialog modal-full-width">

              <div className="modal-content">
                <div className="modal-header">
                  <h4 className="modal-title text-primary">
                    Pre-simulate Attack Steps
                  </h4>
                  <button type="button" className="close" data-dismiss="modal">
                    <span>&times;</span>
                  </button>
                </div>
                <div className="modal-body">
                  <iframe
                    title="Embed Pre-simulate Attack Steps"
                    src="https://api.secureelements.io/simulate-attack-steps/index.html"
                    className="embed-simulate-attack-steps">
                  </iframe>
                </div>
              </div>

            </div>
          </div>
          {/* Pre-simulate Attack Steps Modal ENDS */}

          {/* Add Attack Step Modal */}
          <div className="modal fade" id="ModalAddAttackStep" tabIndex="-1" data-keyboard="false" data-backdrop="static">
            <div className="modal-dialog modal-full-width">

              <form id="Form-Modal-Add-Attack-Step" onSubmit={(ev) => this.onSubmitAddAttackStep(ev)}>
                <div className="modal-content">
                  <div className="modal-header">
                    <h4 className="modal-title text-primary">
                      Add <b>Attack Step</b>
                    </h4>
                    <button type="button" className="close" data-dismiss="modal">
                      <span>&times;</span>
                    </button>
                  </div>
                  <div className="modal-body">

                    <div className="form-group row" id="Modal-Input-Attack-Logic-Container">
                      <div className="col-12 mb-3 text-uppercase text-muted">
                        Logic
                      </div>
                      <div className="col-2">
                        <select className="form-control md-form-control select" id="Modal-Input-Attack-Logic">
                          <option value="AND" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Logic'] === 'AND'}>AND</option>
                          <option value="OR" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Logic'] === 'OR'}>OR</option>
                        </select>
                      </div>
                    </div>

                    <div className="form-group row">
                      <div className="col-12 mb-2 text-uppercase text-muted">
                        Step
                      </div>
                      <div className="col-12">
                        <input type="text" className="form-control md-form-control" placeholder="Describe your attack step" id="Modal-Input-Attack-Step" defaultValue={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step']} required />
                      </div>
                    </div>

                    <div className="form-group row">
                      <div className="col-12 mb-2 text-uppercase text-muted">
                        Description
                      </div>
                      <div className="col-12">
                        <input type="text" className="form-control md-form-control" defaultValue={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Description']} placeholder="Description (Optional)" id="Modal-Input-Attack-Description" />
                      </div>
                    </div>

                    <div className="form-group row">
                      <div className="col-12 mb-2 text-uppercase text-muted">
                        Attack Step Feasibility Ratings
                      </div>

                      <div className="col-2">
                        <label>Specialist Expertise</label>
                        <select className="form-control md-form-control select my-2 input-attack-step-feasibility-ratings" name="Specialist-Expertise" id="Modal-Input-Attack-Specialist-Expertise" required>
                          <option value="Layman" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Specialist-Expertise'] === 'Layman'}>Layman</option>
                          <option value="Proficient" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Specialist-Expertise'] === 'Proficient'}>Proficient</option>
                          <option value="Expert" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Specialist-Expertise'] === 'Expert'}>Expert</option>
                          <option value="Multiple" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Specialist-Expertise'] === 'Multiple'}>Multiple Experts</option>
                        </select>
                      </div>

                      <div className="col-2">
                        <label>Window of Opportunity</label>
                        <select className="form-control md-form-control select my-2 input-attack-step-feasibility-ratings" name="Window-Of-Opportunity" id="Modal-Input-Attack-Window-of-Opportunity" required>
                          <option value="Unlimited" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Window-of-Opportunity'] === 'Unlimited'}>Unlimited</option>
                          <option value="Easy" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Window-of-Opportunity'] === 'Easy'}>Easy</option>
                          <option value="Moderate" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Window-of-Opportunity'] === 'Moderate'}>Moderate</option>
                          <option value="Difficult" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Window-of-Opportunity'] === 'Difficult'}>Difficult/None</option>
                        </select>
                      </div>

                      <div className="col-2">
                        <label>Equipment/Effort</label>
                        <select className="form-control md-form-control select my-2 input-attack-step-feasibility-ratings" name="Equipment-Effort" id="Modal-Input-Attack-Equipment" required>
                          <option value="Standard" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Equipment'] === 'Standard'}>Standard</option>
                          <option value="Specialiced" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Equipment'] === 'Specialiced'}>Specialiced</option>
                          <option value="Bespoke" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Equipment'] === 'Bespoke'}>Bespoke</option>
                          <option value="Multiple-Bespoke" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Equipment'] === 'Multiple-Bespoke'}>Multiple Bespoke</option>
                        </select>
                      </div>

                      <div className="col-3">
                        <label>Elapsed Time</label>
                        <select className="form-control md-form-control select my-2 input-attack-step-feasibility-ratings" name="Elapsed-Time" id="Modal-Input-Attack-Elapsed-Time" required>
                          <option value="Less-Than-1-Week" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Elapsed-Time'] === 'Less-Than-1-Week'}>Less-than 1 week</option>
                          <option value="Less-Than-1-Month" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Elapsed-Time'] === 'Less-Than-1-Month'}>Less-than 1 month</option>
                          <option value="Less-Than-6-Months" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Elapsed-Time'] === 'Less-Than-6-Months'}>Less-than 6 months</option>
                          <option value="Less-Than-3-Years" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Elapsed-Time'] === 'Less-Than-3-Years'}>Less-than 3 years</option>
                          <option value="More-Than-3-Years" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Elapsed-Time'] === 'More-Than-3-Years'}>More-than 3 years</option>
                        </select>
                      </div>

                      <div className="col-3">
                        <label>Knowledge of Item</label>
                        <select className="form-control md-form-control select my-2 input-attack-step-feasibility-ratings" name="Knowledge-Of-Item" id="Modal-Input-Attack-Knowledge-of-Item" required>
                          <option value="Negligible" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Knowledge-of-Item'] === 'Negligible'}>Negligible</option>
                          <option value="Moderate" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Knowledge-of-Item'] === 'Moderate'}>Moderate</option>
                          <option value="Major" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Knowledge-of-Item'] === 'Major'}>Major</option>
                          <option value="Severe" selected={this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Knowledge-of-Item'] === 'Severe'}>Severe</option>
                        </select>
                      </div>
                    </div>

                    <div className="form-group row">
                      <div className="col-12 mb-2 text-uppercase text-muted">
                        Ratings
                      </div>

                      <div className="col-4">
                        <div className="alert alert-primary">
                          <span className="alert-attack-type">Attack Feasibility Rating</span> <br />
                          <span id="Modal-Input-Attack-Feasibility-Rating" className="alert-attack-value">{this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Attack-Feasibility-Rating']}</span>
                        </div>
                      </div>

                      <div className="col-4">
                        <div className="alert alert-primary">
                          <span className="alert-attack-type">Impact Rating</span> <br />
                          <span id="Modal-Input-Impact-Rating" className="alert-attack-value">{this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Impact-Rating']}</span>
                        </div>
                      </div>

                      <div className="col-4">
                        <div className="alert alert-primary">
                          <span className="alert-attack-type">Risk Value</span> <br />
                          <span id="Modal-Input-Risk-Rating" className="alert-attack-value">{this.state.currentConfigureStep && this.state.currentConfigureStep['Attack-Step-Risk-Rating']}</span>
                        </div>
                      </div>
                    </div>

                  </div>
                  <div className="modal-footer">
                    <div className="row w-100">
                      <div className="col-12 text-right">
                        <button type="submit" className="btn btn-primary">
                          Add Step
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </form>

            </div>
          </div>
          {/* Add Attack Step Modal ENDS */}

        </DashboardLayout>
      </div>
    );
  }
}

// TARA Screen
export default withRouter(TARAScreen);