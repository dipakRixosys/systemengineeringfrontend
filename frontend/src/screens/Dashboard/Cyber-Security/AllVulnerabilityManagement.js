// React
import React from 'react';
// Router
import { Link } from 'react-router-dom';
// React Select
import Select from 'react-select'
// Layout
import DashboardLayout from 'screens/Layouts/DashboardLayout';
// Network Helpers
import { httpGet, apify } from 'helpers/network';
// Helpers
import { setTitle, swalConfirmationPopup } from "helpers/common";


// 
class AllVulnerabilityManagement extends React.Component {

  state = {
    loading: true,
    yesNoSelects: [
      { label: 'Yes', value: "Yes" },
      { label: 'No', value: "No" },
    ],
    listEvaluation: [],
    allVulnerabilities: [],
    programs: [],
    projects: [],
    addablePrograms: [],
    functions: [],
    components: [],
    filters: {},
  };

  // On submit
  onSubmit = (ev) => {

    const jQuery = window.jQuery;

    jQuery('#vulModal .close').click()
    jQuery('.modal-backdrop').remove()


    let phaseRoute = `/dashboard/cybersecurity/vulnerability-monitoring-and-triage/${this.state.program['uuid']}?component=${this.state.componentName ? this.state.componentName['value'] : true}`;
    this.props.history.push(phaseRoute);
  }

  // Fetch system configuration at initial load
  fetchSysConf = (_initialConf = undefined) => {
    let initialConf = _initialConf ?? this.state['program']['system_configuration'];
    let functions = [];
    let componentArray = [];

    for (const [key, systemFunction] of Object.entries(initialConf)) {
      systemFunction['components'].forEach(componentObject => {
        componentArray.push({
          'parentKey': key,
          'label': componentObject['component_name'],
          'value': componentObject['component_uuid'],
        });
      });

    }

    this.setState({
      componentArray: componentArray,
      functions: functions,
      loading: false,
    }, () => {

    });
  }

  // Asset options
  prepareAssetOptions = (assets) => {
    var assetArray = [];


    if (assets && assets['Identification'] && assets['Identification']['Items']) {
      assets['Identification']['Items'].forEach(item => {
        if (item['Identified']) {

          //
          var securityPropertyOptions = [];
          item['Cyber-Security-Properties'].forEach(securityProperty => {
            securityPropertyOptions.push({
              label: securityProperty,
              value: securityProperty,
            });
          });
          item['Cyber-Security-Properties-Options'] = securityPropertyOptions;

          //
          assetArray.push({
            value: item['RefId'],
            label: item['Name'],
            property: item,
          });

        }
      });
    }
    return assetArray;
  }
  
  // Asset options
  prepareVulnerabilityOptions = (vulnerability) => {
    var vulnerabilityArray = [];
    var listEvaluation = [];
    vulnerability['Items'].forEach(item => {
      if ((item['Is-Internal-Type'] === true || item['Is-External-Type'] === true) && item['Vulnerability-Management'] !== true) {
        vulnerabilityArray.push({
          value: item['Uuid'],
          label: item['Name'],
          property: item,
        });
      }

      if (item['Vulnerability-Management'] === true) {
        listEvaluation.push(item)
      }
    });

    this.setState({ listEvaluation: listEvaluation })
    return vulnerabilityArray;
  }

  // Change vulnerability option
  onChangeProgramyOption = (ev) => {

    this.setState({
      program: undefined,
      vulnerability: undefined,
    }, () => {
      this.setState({
        program: ev['property'],
        programSelected: ev,
        vulnerability: {},
      }, () => {

        this.fetchSysConf()
      });
    })

  }



  programs = () => {


    let Vullength = 0
    let programs = []
    this.setState({
      currentProgram: null
    })

    let apiUrl = 'app/program-list'
    let params = this.state.filters
    if (params instanceof Object && params && params !== undefined && params !== {}) {

      let query = Object.keys(params)
        .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))
        .join('&');
      apiUrl = apiUrl.concat(`?${query}`)
      // apiUrl = apiUrl
    }


    let programArray = []

    //
    httpGet(apify(apiUrl)).then(data => {
      data['programs'].map(prog => {
        if (prog['vulnerabilities'] && prog['vulnerabilities']['Items'] && prog['vulnerabilities']['Items'].length > 0) {
          let assets = this.prepareAssetOptions(prog['assets']);
          prog['vulnerabilities']['Items'].map(vul => {

            assets.map(asset => {
              if (asset['value'] === vul['Asset-Uuid']) {
                vul['Asset'] = asset
              }
              return true
            })
            Vullength++
            return null

          })
        }

        programArray.push({
          label: prog['name'],
          value: prog['id'],
          property: prog,
        })
        return null
      })

      programs = data['programs']

      //
      this.setState({
        programs: programs,
        programArray: programArray,
        loading: false,
        Vullength: Vullength
      }, () => {

        // this.analysisData()
      })

    });


  }


  //
  reConfigure(vulnerability) {
    //
    var vm = this;
    //
    swalConfirmationPopup({
      title: null,
      text: "This action will reset the vulnerability data.",
      confirmButtonText: "Re-configure",
    }, () => {

      vm.setState({
        loading: true
      }, () => {

        this.setState({
          vulnerability: undefined,
        }, () => {

          let ev = {}
          this.state.allVulnerabilities['Items'].map(vul => {
            if (vul['Uuid'] === vulnerability['Uuid']) {
              vul['Vulnerability-Management'] = false
            }
            return null
          })

          this.setState({
            vulnerabilities: this.prepareVulnerabilityOptions(this.state.allVulnerabilities)
          }, () => {


            this.state.vulnerabilities.map(vul => {
              if (vul['value'] === vulnerability['Uuid']) {
                ev = vul
              }
              return null
            })

            this.setState({
              loading: false,
              vulnerability: ev['property'],
              vulnerabilitieSelected: ev,
              remediationAvailibility: ev['property']['Remediation-Availibility'] === true ? { label: 'Yes', value: 'Yes' } : { label: 'No', value: 'No' }
            });
          })

        })
      });

    });
  }


  // On submit
  onDataChange = (event) => {
    this.setState({
      vulnerability: {
        ...this.state.vulnerability,
        [`${event.target.name}`]: event.target.value,
      },
    })


  }
  //
  saveAndContinue = (ev) => {
    let phaseRoute = `/dashboard/cybersecurity/vulnerability-analysis/${this.state.programUuid}`;
    this.props.history.push(phaseRoute);
  }


  // On submit
  vulDeatils = (vulnerability) => {


    let html = '<div class="row">'
    html += '<div class="col-4 label py-2">Name :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Name'] + '</div>'
    html += '<div class="col-4 label py-2">Description :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Description'] + '</div>'
    html += '<div class="col-4 label py-2">Is Internal Type :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Is-Internal-Type'] + '</div>'

    if (vulnerability['Is-Internal-Type']) {
      html += '<div class="col-4 label py-2">Internal Sources :</div>'
      html += '<div class="col-8 py-2">' + (vulnerability['Internal-Source'] && vulnerability['Internal-Source'].map(sourse => {
        return '<span class="badge badge-primary">' + sourse['value'] + '</span>'
      })) + '</div>'
      html += '<div class="col-4 label py-2">Internal CVE Number :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['Internal-CVE-Number'] + '</div>'
      html += '<div class="col-4 label py-2">Internal Vulnerability ID :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['Internal-Vulnerability-ID'] + '</div>'
    }
    html += '<div class="col-4 label py-2">Is External Type :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Is-External-Type'] + '</div>'

    if (vulnerability['Is-External-Type']) {
      html += '<div class="col-4 label py-2">External Sources :</div>'
      html += '<div class="col-8 py-2">' + (vulnerability['External-Source'] && vulnerability['External-Source'].map(sourse => {
        return '<span class="badge badge-primary p-1">' + sourse['value'] + '</span>'
      })) + '</div>'
      html += '<div class="col-4 label py-2">External CVE Number :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['External-CVE-Number'] + '</div>'
      html += '<div class="col-4 label py-2">External Vulnerability ID :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['External-Vulnerability-ID'] + '</div>'
    }
    html += '<div class="col-4 label py-2">Triage ID :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Triage-ID'] + '</div>'
    html += '<div class="col-4 label py-2">Triage Description :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Triage-Description'] + '</div>'
    html += '<div class="col-4 label py-2">Triage Triggers :</div>'
    html += '<div class="col-8 py-2">' + (vulnerability['Triage-Triggers'] && vulnerability['Triage-Triggers'].map(triger => {
      return '<span class="badge badge-primary p-1">' + triger['value'] + '</span>'
    })) + '</div>'
    if (vulnerability['Evaluation']) {
      // html += '<div class="col-4 label py-2">Analysing-Security-Event :</div>'
      // html += '<div class="col-8 py-2">' + (vulnerability['Evaluation']['Threat-Scenarios'] && vulnerability['Evaluation']['Threat-Scenarios'].map(sourse => {
      //   return '<span class="badge badge-primary p-1">' + sourse['value'] + '</span>'
      // })) + '</div>'
      html += '<div class="col-4 label py-2">Analysing Security Event :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['Evaluation']['Analysing-Security-Event'] + '</div>'
      html += '<div class="col-4 label py-2">Remediation Availibility :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['Evaluation']['Remediation-Availibility'] + '</div>'
      html += '<div class="col-4 label py-2">Identified Weakness :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['Evaluation']['Identified-Weakness'] + '</div>'
    }


    html += '</div>'
    return html


  }


  //
  onChangeSystem = (ev) => {

    let array = []

    ev.map(data => {
      array.push(data.value)
      return null
    })

    this.setState({
      filters: {
        ...this.state.filters,
        system: array
      },
      preDefineFilters: {
        ...this.state.preDefineFilters,
        system: ev
      }
    }, () => {


      if (array.length <= 0) {
        delete this.state.filters.system
      }
      this.programs()
    })

  }

  //
  onChangePhase = (ev) => {

    let array = []

    ev.map(data => {
      array.push(data.value)

      return null
    })

    this.setState({
      filters: {
        ...this.state.filters,
        phase: array
      },
      preDefineFilters: {
        ...this.state.preDefineFilters,
        phase: ev
      }
    }, () => {
      if (array.length <= 0) {
        delete this.state.filters.phase
      }
      this.programs()
    })
  }

  projectData = (groupsData) => {
    var groups = [];
    groupsData.forEach(group => {
      group['oem_partners'].forEach(oem => {
        if (oem['vehiclePrograms']) {

          Object.keys(oem['vehiclePrograms']).forEach(key => {
            let vehicle = oem['vehiclePrograms'][key]
            vehicle.forEach((year, index) => {
              //
              groups.push({
                label: `${group['name']}-${oem['name']}-${key}-${year['year']}`,
                value: year['id'],
              });
              return true
            })
            return true
          })
        }
        return true
      })
      return true
    });

    return groups
  }

  onChangeGroup = (ev) => {
    this.setState({
      groupSelected: ev,
      filterForAdd: {
        ...this.state.filterForAdd,
        vehicleProgram: ev.value,
        pluckValue: 'system'
      },
      program: null,
      programSelected: null,
      addablePrograms: [],
      systemListAdd: [],
      phaseListAdd: [],
    }, () => {
      this.programsForAdd()
    })
  }

  onChangeSystemAdd = (ev) => {
    this.setState({
      systemSelected: ev,
      filterForAdd: {
        ...this.state.filterForAdd,
        system: ev.value,
        pluckValue: 'phase',
      },
      program: null,
      programSelected: null,
      addablePrograms: [],
      phaseListAdd: [],
    }, () => {
      this.programsForAdd()
    })
  }

  onChangePhaseAdd = (ev) => {
    this.setState({
      phaseSelected: ev,
      filterForAdd: {
        ...this.state.filterForAdd,
        phase: ev.value,
        pluckValue: null,
      },
      program: null,
      programSelected: null,
      addablePrograms: [],
    }, () => {
      this.programsForAdd()
    })
  }

  programsForAdd = (ev) => {

    let apiUrl = 'app/program-list'
    let params = this.state.filterForAdd
    if (params instanceof Object && params && params !== undefined && params !== {}) {

      let query = Object.keys(params)
        .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))
        .join('&');
      apiUrl = apiUrl.concat(`?${query}`)
      // apiUrl = apiUrl
    }


    let addablePrograms = []

    //
    httpGet(apify(apiUrl)).then(data => {

      let systemListAdd = []
      let defaultprogram = null

      if (params.pluckValue === 'system') {
        data.pluckValue && data.pluckValue.map(system => {
          systemListAdd.push({
            label: system['name'],
            value: system['id'],
          });

          return null

        })

      } else {
        systemListAdd = this.state.systemListAdd
      }

      let phaseListAdd = []

      if (params.pluckValue === 'phase') {
        data.pluckValue && data.pluckValue.map(phase => {
          phaseListAdd.push({
            label: phase['phase'],
            value: phase['phase'],
          });

          return true

        })



      } else {
        phaseListAdd = this.state.phaseListAdd
      }

      data['programs'].map(prog => {

        addablePrograms.push({
          label: prog['name'],
          value: prog['id'],
          property: prog,
        })
        return null
      })

      defaultprogram = addablePrograms && addablePrograms.length > 0 && !params.pluckValue ? data['programs'][0] : null

      //
      this.setState({
        addablePrograms: addablePrograms,
        systemListAdd: systemListAdd,
        phaseListAdd: phaseListAdd,
        program: defaultprogram
      }, () => {
        if (this.state.program) { this.fetchSysConf() }
        // this.analysisData()
      })

    });
  }


  //
  async componentDidMount() {
    //
    setTitle("Vulnerability Management");


    // Projects
    httpGet(apify('app/projects')).then((data) => {
      //
      //
      let groups = this.projectData(data['groups'])

      this.setState({
        groups: groups
      })
    });


    //
    httpGet(apify('app/phases')).then(data => {
      var phases = [];
      data['phases'].forEach(e => {
        phases.push({
          label: e['phase'],
          value: e['phase'],
        });
      });
      //
      this.setState({
        phases: phases
      })

    });

    //
    httpGet(apify('app/systems')).then(data => {
      var system = [];
      data['systems'].forEach(e => {
        system.push({
          label: e['name'],
          value: e['id'],
        });
      });
      //
      this.setState({
        systemList: system
      })

    });

    this.programs()

    const jQuery = window.jQuery;
    jQuery(document).ready(function () {
      jQuery('[data-toggle="popover"]').popover({
        html: true,
        container: 'body',
        placement: 'left',
        trigger: 'click'
      });
    });

    jQuery('body').on('click', '.close-popup', function (ev) {
      jQuery('[data-toggle="popover"]').popover('hide');
    });

  }

  //
  popupTitleHtml = (data) => {
    let html = `
        <div class="row">
          <div class="col-8">
            <h3 class="text-primary">
              ${data}
            </h3>
          </div>
          <div class="col-4 text-right">
            <span class="close-popup">Close</span>
          </div>
        </div>
      `;
    return html;
  }


  render() {
    return (
      <DashboardLayout allowDemoMode={false}>
        <div className="container-fluid">

          {
            !this.state.loading &&
            <div>
              {
                <div className="row">

                  <div class="modal fade" id="vulModal" tabindex="-1" role="dialog" aria-labelledby="vulModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                      <div class="modal-content">
                        <div class="modal-header">
                          <h5 class="modal-title" id="vulModalLabel">Add New Vulnerability</h5>
                          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                          </button>
                        </div>
                        <div class="modal-body">
                          <div class="row">
                            <div className="col-12 col-md-12">
                              {
                                <div className="">
                                  <div className="">
                                    <div className="form-group row">
                                      <div className="col-4 text-muted">
                                        Programs
                                      </div>
                                      <div className="col-8">
                                        <Select
                                          options={this.state.groups}
                                          value={this.state.groupSelected}
                                          onChange={(ev) => this.onChangeGroup(ev)}
                                        />
                                      </div>

                                    </div>
                                    <div className="form-group row">
                                      <div className="col-4 text-muted">
                                        Systems
                                      </div>
                                      <div className="col-8">
                                        <Select
                                          options={this.state.systemListAdd}
                                          onChange={(ev) => this.onChangeSystemAdd(ev)}
                                          value={this.state.systemSelected}
                                        />
                                      </div>

                                    </div>
                                    <div className="form-group row">
                                      <div className="col-4 text-muted">
                                        Phases
                                      </div>
                                      <div className="col-8">
                                        <Select
                                          options={this.state.phaseListAdd}
                                          onChange={(ev) => this.onChangePhaseAdd(ev)}
                                          value={this.state.phaseSelected}
                                        />
                                      </div>

                                    </div>
                                    {/* <div className="form-group row">
                                      <div className="col-4 text-muted">
                                        Programs
                                      </div>
                                      <div className="col-8">
                                        <Select
                                          options={this.state.addablePrograms}
                                          value={this.state.programSelected}
                                          onChange={(ev) => this.onChangeProgramyOption(ev)}
                                        />
                                      </div>

                                    </div> */}

                                    {this.state.program && <div className="row">
                                      {/*  */}
                                      <div className="col-md-12">
                                        <div className="form-group row">
                                          <div className="col-4 text-muted">
                                            Components
                                          </div>
                                          <div className="col-8">
                                            <Select options={this.state.componentArray}
                                              value={this.state.componentName}
                                              onChange={(ev) => {
                                                this.setState({
                                                  componentName: ev
                                                })
                                              }} />

                                          </div>
                                        </div>
                                      </div>

                                      {false && <div className="col-md-12">
                                        <div className="form-group row">
                                          <div className="col-4 text-muted">
                                            Component Name
                                          </div>
                                          <div className="col-8">
                                            <Select options={this.state.componentName['components']}
                                              value={this.state.ComponentName}
                                              onChange={(ev) => {
                                                this.setState({
                                                  vulnerability: {
                                                    ...this.state.vulnerability,
                                                    "Management": {
                                                      ...this.state.vulnerability['Management'],
                                                      'Component-Name': ev.value
                                                    },
                                                  },
                                                  ComponentName: ev
                                                })
                                              }} />

                                          </div>
                                        </div>
                                      </div>}

                                    </div>}

                                  </div>

                                </div>
                              }


                            </div>
                          </div>
                        </div>

                        <div class="modal-footer">
                          <button type="button" className="btn btn-primary"
                            disabled={!this.state.program}
                            onClick={(ev) => this.onSubmit(ev)}>
                            Submit
                          </button>
                          {/* <button type="button" class="btn btn-primary">Save changes</button> */}
                        </div>
                      </div>
                    </div>
                  </div>


                  {/* Right sidebar */}
                  <div className="col-12 col-md-12">
                    <div className="card">
                      <div className="card-header">

                        <div className="row">
                          <div className="col-6">
                            <h3>Cyber Security Vulnerability Management</h3>

                          </div>
                          <div className="col-6">
                            <div class="float-right">
                              <button type="button" class="btn btn-success text-white" data-toggle="modal" data-target="#vulModal">
                                Add New Vulnerability
                              </button>

                            </div>

                          </div>
                        </div>
                        <div className="row">
                          <div className="col-12">
                            <hr />
                          </div>
                        </div>
                        {<div className="row">
                          <div className="col-2">
                            <small className="text-uppercase text-muted">System</small>
                            <Select
                              options={this.state.systemList}
                              onChange={(ev) => this.onChangeSystem(ev)}
                              value={this.state.preDefineFilters && this.state.preDefineFilters.system}
                              defaultValue={this.state.preDefineFilters && this.state.preDefineFilters.system}
                              isMulti={true}
                              menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}
                            />
                          </div>

                          <div className="col-2">
                            <small className="text-uppercase text-muted">Phases</small>
                            <Select
                              options={this.state.phases}
                              onChange={(ev) => this.onChangePhase(ev)}
                              isMulti={true}
                              value={this.state.preDefineFilters && this.state.preDefineFilters.phase}
                              menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}
                            />
                          </div>

                        </div>}
                      </div>
                      <div className="card-body p-0">
                        <table className="table table-bordered">
                          <thead>
                            <tr>
                              <th>Program Name</th>
                              <th>System Name</th>
                              <th>Phase</th>
                              <th>Vulnerability Name</th>
                              <th>Asset</th>
                              <th>Internal Type</th>
                              <th>External Type</th>
                              {/* <th>Analysing Security Event</th>
                                                            <th>Identified Weakness</th> */}
                              <th>Remediation Availibility</th>
                              <th>Threat Scenarios</th>
                              <th>Attack</th>
                              <th></th>
                            </tr>
                          </thead>
                          <tbody>
                            {/* No Threats */}
                            {
                              this.state.Vullength === 0
                              &&
                              <tr>
                                <td colSpan="10" class="text-center">
                                  No Vulnerability yet.
                                </td>
                              </tr>
                            }

                            {/* Threats */}
                            {
                              this.state.Vullength >= 0 && this.state.programs && this.state.programs.map(program => {

                                return (
                                  program['vulnerabilities'] && program['vulnerabilities']['Items'] && program['vulnerabilities']['Items'].map(vulnerability => {
                                    return (
                                      <tr key={vulnerability['RefId']}>
                                        <td>{program['name']}</td>
                                        <td>{program['system']['name']}</td>
                                        <td>{program['phase']}</td>
                                        <td><span data-toggle="popover" title={this.popupTitleHtml(vulnerability['Name'])} data-html="true" data-content={this.vulDeatils(vulnerability)}>{vulnerability['Name']}</span></td>
                                        <td>{vulnerability['Asset'] && vulnerability['Asset']['label']}</td>
                                        <td>{vulnerability['Is-Internal-Type'] ? <span class="badge badge-success">True</span> : <span class="badge badge-danger"> False</span>}</td>
                                        <td>{vulnerability['Is-External-Type'] ? <span class="badge badge-success">True</span> : <span class="badge badge-danger"> False</span>}</td>
                                        <td><span className='text-truncate-line1'>{vulnerability['Evaluation'] && vulnerability['Evaluation']['Remediation-Availibility'] === true ? <span class="badge badge-success">True</span> : <span class="badge badge-danger"> False</span>}</span></td>
                                        <td>
                                          <ul>
                                            {vulnerability['Evaluation'] && vulnerability['Evaluation']['Threat-Scenarios'].map(threst => {
                                              return <li class="">{threst.label}</li>
                                            })}
                                          </ul>
                                        </td>
                                        <td>
                                          <ul>
                                            {vulnerability['Attack-Uuid'].map(attack => {
                                              return <li class="">{attack.label}</li>
                                            })}
                                          </ul>
                                        </td>
                                        <td>
                                          <Link to={`/dashboard/cybersecurity/vulnerability-monitoring-and-triage/${program['uuid']}`}>
                                            Edit
                                          </Link>
                                        </td>
                                      </tr>
                                    )
                                  })
                                )
                              })
                            }
                          </tbody>
                        </table>

                        <div className="m-2">

                        </div>
                      </div>
                      {false && <div className="card-footer">
                        {false && <div className="has-checkbox mb-3">
                          <input type="checkbox" className="mr-2" onChange={(event) => {
                            this.setState({
                              saveAndContinue: event.currentTarget.checked
                            })
                          }} />
                          <label>You are about to make the final submission for the vulnerabilities.</label>
                        </div>}
                        <button className="btn btn-success" onClick={() => this.saveAndContinue()}>
                          Save and Continue
                          <i className="fa fa-chevron-right ml-2"></i>
                        </button>
                      </div>}

                    </div>
                  </div>
                </div>
              }
            </div>
          }
        </div>

      </DashboardLayout>
    )
  }

}

export default AllVulnerabilityManagement


