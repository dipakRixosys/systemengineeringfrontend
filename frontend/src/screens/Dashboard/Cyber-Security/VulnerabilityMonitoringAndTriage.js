// React
import React from 'react';
// Router
import { Link } from 'react-router-dom';
// React Select
import Select from 'react-select'
// Layout
import DashboardLayout from 'screens/Layouts/DashboardLayout';
// Network Helpers
import { httpGet, apify, httpPost } from 'helpers/network';
// Helpers
import { setTitle, programLifecycleRoute, uuidV4, swalConfirmationPopup, uuidProject } from "helpers/common";

// Vulnerability Monitoring & Triage
class Monitoring extends React.Component {

  // State
  state = {
    loading: true,
    reconfigState: false,
    reconfigureState: false,
    yesNoSelects: [
      { label: 'Yes', value: "Yes" },
      { label: 'No', value: "No" },
    ],

    internalSources: [],
    externalSources: [],
    triageTriggers: [],
  };


  validate = (requiredParameters, vulnerability) => {

    let index = 0
    let validated = false

    requiredParameters.map(parameter => {
      var referenceNode = document.getElementsByName(parameter)[0]

      if ((!vulnerability || !vulnerability[parameter] || vulnerability[parameter] === '')) {
        let span = document.getElementById(`${parameter}-Alert-Error`)

        // Create a new element
        var newNode = document.createElement('span');
        newNode.innerHTML = `${parameter.replaceAll('-', ' ')} are Required`
        newNode.id = `${parameter}-Alert-Error`
        newNode.className = `text-sm text-danger`

        if (!span) {
          referenceNode.classList.add('border-danger')
          referenceNode.after(newNode);
        }

      } else {
        let span = document.getElementById(`${parameter}-Alert-Error`)
        if (span) {
          span.remove()
          referenceNode.classList.remove('border-danger')
        }
        index++;

      }
      return null
    })

    if (requiredParameters.length === index) {
      validated = true
    }

    return validated
  }

  // On submit
  onSubmit = (ev) => {


    let validated = false

    let vulnerability = this.state.vulnerability

    let requiredParameters = ['Description']


    if (vulnerability['Is-Internal-Type'] || vulnerability['Is-External-Type']) {
      requiredParameters.push('Triage-Triggers', 'Triage-Description', 'CyberSecurity-Event')

      if (vulnerability['Is-Internal-Type']) {
        requiredParameters.push('Internal-Vulnerability-Name', 'Internal-Vulnerability-Description', 'Internal-Source', 'Internal-CVE-Number')
      }
      if (vulnerability['Is-External-Type']) {
        requiredParameters.push('External-Vulnerability-Name', 'External-Vulnerability-Description', 'External-Source', 'External-CVE-Number')
      }
    }

    validated = this.validate(requiredParameters, vulnerability)



    if (validated) {

      if (this.state.program['status'] === 'CREATED' || this.state.program['status'] === 'IN-PROCESS') {
        vulnerability['Added-Time'] = 'Before'
      } else {
        vulnerability['Added-Time'] = 'After'
      }

      vulnerability['Uuid'] = vulnerability['Uuid'] ? vulnerability['Uuid'] : uuidV4()
      vulnerability['Attack-Uuid'] = vulnerability['Attack-Uuid'] ? vulnerability['Attack-Uuid'] : []

      var vm = this;
      httpPost(apify('app/program/vulnerabilities/add'), {
        programUuid: vm.state.programUuid,
        vulnerability: vm.state.vulnerability,
        uuidCounters: vm.state.uuidCounters
      }).then(res => {
        if (res['success']) {
          window.location.reload(false);
        }
      });
    }
  }

  // On submit
  saveAndContinue = (ev) => {

    let phaseRoute = `/dashboard/cybersecurity/cybersecurity-event-evaluation/${this.state.programUuid}`;
    this.props.history.push(phaseRoute);
  }

  // Asset options
  prepareAssetOptions = (assets) => {

    var assetArray = [];
    var PreDifineValues = [];


    if (this.state.componentName && this.state.componentName['label']) {

      if (assets && assets['Components']) {
        assets['Components'].forEach(comp => {
          if (comp['Name'] === this.state.componentName['label']) {
            PreDifineValues.push(comp['RefId'])
          }
          return true
        })
      }
    }



    if (assets && assets['Identification'] && assets['Identification']['Items']) {
      assets['Identification']['Items'].forEach(item => {

        if (item['Identified'] && (!this.state.componentName || PreDifineValues.includes(item['Parent-Ref-Id']))) {

          //
          var securityPropertyOptions = [];
          item['Cyber-Security-Properties'].forEach(securityProperty => {
            securityPropertyOptions.push({
              label: securityProperty,
              value: securityProperty,
            });
          });
          item['Cyber-Security-Properties-Options'] = securityPropertyOptions;

          //
          assetArray.push({
            value: item['RefId'],
            label: item['Name'],
            property: item,
          });

        }
      });
    }

    return assetArray;
  }

  // Change asset option
  onChangeAssetOption = (ev) => {

    this.setState({
      vulnerability: this.state.reconfigureState ? this.state.vulnerability : undefined,
    }, () => {

      if (!this.state.reconfigureState) {
        this.setState({
          property: ev['property'],
          assetSelected: ev,
          vulnerability: {
            "Component-Uuid": this.state.componentName ? this.state.componentName : null,
            "Asset-Uuid": ev['property']['RefId'],
            "Name": `${ev['property']['Name']} vulnerability`,
            "Description": ev['property']['Description'],
            "Is-Internal-Type": false,
            "Internal-Source": null,
            "Internal-CVE-Number": null,
            "Is-External-Type": false,
            "External-Source": null,
            "External-CVE-Number": null,
            "Triage-ID": uuidProject(this.state.program['id'], 'TID', this.state.uuidCounters['TID'] ? this.state.uuidCounters['TID'] + 1 : 1),
            "Internal-Vulnerability-ID": uuidProject(this.state.program['id'], 'IVID', this.state.uuidCounters['IVID'] ? this.state.uuidCounters['IVID'] + 1 : 1),
            "External-Vulnerability-ID": uuidProject(this.state.program['id'], 'EVID', this.state.uuidCounters['EVID'] ? this.state.uuidCounters['EVID'] + 1 : 1),
            "CyberSecurity-Event-ID": uuidProject(this.state.program['id'], 'CEID', this.state.uuidCounters['CEID'] ? this.state.uuidCounters['CEID'] + 1 : 1),
          },
          externalType: { label: 'No', value: "No" },
          internalType: { label: 'No', value: "No" },
          uuidCounters: {
            'TID': this.state.uuidCounters['TID'] ? this.state.uuidCounters['TID'] + 1 : 1,
            'IVID': this.state.uuidCounters['IVID'] ? this.state.uuidCounters['IVID'] + 1 : 1,
            'EVID': this.state.uuidCounters['EVID'] ? this.state.uuidCounters['EVID'] + 1 : 1,
            'CEID': this.state.uuidCounters['CEID'] ? this.state.uuidCounters['CEID'] + 1 : 1
          }
        });
      } else {
        this.setState({
          roperty: ev['property'],
          assetSelected: ev,
          vulnerability: {
            ...this.state.vulnerability,
            "Asset-Uuid": ev['property']['RefId'],
          },
        });
      }

    })

  }


  //
  reConfigure(vulnerability) {
    //
    var vm = this;


    //
    swalConfirmationPopup({
      title: null,
      text: "This action will reset the vulnerability data.",
      confirmButtonText: "Re-configure",
    }, () => {

      if (vulnerability['Component-Uuid']) {
        this.onChangeComponent(vulnerability['Component-Uuid'])

        this.setState({
          reconfigState: true
        })
      }

      vm.setState({
        loading: true,
        reconfigureState: true
      }, () => {

        this.setState({
          vulnerability: undefined,
        }, () => {

          let ev = {}
          this.state.assets.map(asset => {
            if (asset['property']['RefId'] === vulnerability['Asset-Uuid']) {
              ev = asset
              this.onChangeAssetOption(ev)
            }
            return null
          })

          let vulnerabilities = this.state.vulnerabilities

          vulnerabilities['Items'] = this.state.program['vulnerabilities']['Items'].filter(item => item['Uuid'] !== vulnerability['Uuid'])



          this.setState({
            loading: false,
            property: ev['property'],
            assetSelected: ev,
            vulnerability: vulnerability,
            externalType: vulnerability['Is-External-Type'] === false ? { label: 'No', value: "No" } : { label: 'Yes', value: "Yes" },
            internalType: vulnerability['Is-Internal-Type'] === false ? { label: 'No', value: "No" } : { label: 'Yes', value: "Yes" },
            InternalSource: vulnerability['Internal-Source'],
            ExternalSource: vulnerability['External-Source'],
            TriageTrigger: vulnerability['Triage-Triggers'],
            vulnerabilities: vulnerabilities,
          });
        })
      });

    });
  }


  // On submit
  onDataChange = (event) => {
    this.setState({
      vulnerability: {
        ...this.state.vulnerability,
        [`${event.target.name}`]: event.target.value,
      },
    })


  }

  // On submit
  vulDeatils = (vulnerability) => {


    let html = '<div class="row">'
    html += '<div class="col-4 label py-2">Name :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Name'] + '</div>'
    html += '<div class="col-4 label py-2">Description :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Description'] + '</div>'
    html += '<div class="col-4 label py-2">Is Internal Type :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Is-Internal-Type'] + '</div>'

    if (vulnerability['Is-Internal-Type']) {
      html += '<div class="col-4 label py-2">Internal Sources :</div>'
      html += '<div class="col-8 py-2">' + (vulnerability['Internal-Source'] && vulnerability['Internal-Source'].map(sourse => {
        return '<span class="badge badge-primary">' + sourse['value'] + '</span>'
      })) + '</div>'
      html += '<div class="col-4 label py-2">Internal CVE Number :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['Internal-CVE-Number'] + '</div>'
      html += '<div class="col-4 label py-2">Internal Vulnerability ID :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['Internal-Vulnerability-ID'] + '</div>'
    }
    html += '<div class="col-4 label py-2">Is External Type :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Is-External-Type'] + '</div>'

    if (vulnerability['Is-External-Type']) {
      html += '<div class="col-4 label py-2">External Sources :</div>'
      html += '<div class="col-8 py-2">' + (vulnerability['External-Source'] && vulnerability['External-Source'].map(sourse => {
        return '<span class="badge badge-primary p-1">' + sourse['value'] + '</span>'
      })) + '</div>'
      html += '<div class="col-4 label py-2">External CVE Number :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['External-CVE-Number'] + '</div>'
      html += '<div class="col-4 label py-2">External Vulnerability ID :</div>'
      html += '<div class="col-8 py-2">' + vulnerability['External-Vulnerability-ID'] + '</div>'
    }
    html += '<div class="col-4 label py-2">Triage ID :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Triage-ID'] + '</div>'
    html += '<div class="col-4 label py-2">Triage Description :</div>'
    html += '<div class="col-8 py-2">' + vulnerability['Triage-Description'] + '</div>'
    html += '<div class="col-4 label py-2">Triage Triggers :</div>'
    html += '<div class="col-8 py-2">' + (vulnerability['Triage-Triggers'] && vulnerability['Triage-Triggers'].map(triger => {
      return '<span class="badge badge-primary p-1">' + triger['value'] + '</span>'
    })) + '</div>'


    html += '</div>'
    return html


  }
  // Fetch system configuration at initial load
  fetchSysConf = (_initialConf = undefined) => {
    let initialConf = _initialConf ?? this.state['program']['system_configuration'];
    let functions = [];
    let componentArray = [];

    for (const [key, systemFunction] of Object.entries(initialConf)) {
      systemFunction['components'].forEach(componentObject => {
        componentArray.push({
          'parentKey': key,
          'label': componentObject['component_name'],
          'value': componentObject['component_uuid'],
        });

        if (this.state.component && componentObject['component_uuid'] === this.state.component) {
          this.setState({
            componentName: {
              'parentKey': key,
              'label': componentObject['component_name'],
              'value': componentObject['component_uuid'],
            }
          }, () => {
            this.onChangeComponent(this.state.componentName)
          })
        }
      });

    }

    this.setState({
      componentArray: componentArray,
      functions: functions,
      loading: false,
    }, () => {
      let assets = this.prepareAssetOptions(this.state['program']['assets']);
      this.setState({
        assets: assets,
      })
    });
  }

  onChangeComponent = (ev) => {
    this.setState({
      assets: [],
      componentName: ev,
      assetSelected: null
    }, () => {
      let assets = this.prepareAssetOptions(this.state['program']['assets']);
      this.setState({
        assets: assets,
      }, () => {
        this.setState({
          vulnerability: this.state.reconfigureState ? this.state.vulnerability : undefined,
        }, () => {
          if (!this.state.reconfigureState) {
            this.setState({
              vulnerability: {
                "Component-Uuid": ev,
                "Asset-Uuid": null,
                "Name": `${ev['label']} vulnerability`,
                "Description": ev['label'],
                "Is-Internal-Type": false,
                "Internal-Source": null,
                "Internal-CVE-Number": null,
                "Is-External-Type": false,
                "External-Source": null,
                "External-CVE-Number": null,
                "Triage-ID": uuidProject(this.state.program['id'], 'TID', this.state.uuidCounters['TID'] ? this.state.uuidCounters['TID'] + 1 : 1),
                "Internal-Vulnerability-ID": uuidProject(this.state.program['id'], 'IVID', this.state.uuidCounters['IVID'] ? this.state.uuidCounters['IVID'] + 1 : 1),
                "External-Vulnerability-ID": uuidProject(this.state.program['id'], 'EVID', this.state.uuidCounters['EVID'] ? this.state.uuidCounters['EVID'] + 1 : 1),
                "CyberSecurity-Event-ID": uuidProject(this.state.program['id'], 'CEID', this.state.uuidCounters['CEID'] ? this.state.uuidCounters['CEID'] + 1 : 1),
              },
              externalType: { label: 'No', value: "No" },
              internalType: { label: 'No', value: "No" },
              uuidCounters: {
                'TID': this.state.uuidCounters['TID'] ? this.state.uuidCounters['TID'] + 1 : 1,
                'IVID': this.state.uuidCounters['IVID'] ? this.state.uuidCounters['IVID'] + 1 : 1,
                'EVID': this.state.uuidCounters['EVID'] ? this.state.uuidCounters['EVID'] + 1 : 1,
                'CEID': this.state.uuidCounters['CEID'] ? this.state.uuidCounters['CEID'] + 1 : 1
              }
            });
          } else {

            this.setState({
              vulnerability: {
                ...this.state.vulnerability,
                "Component-Uuid": ev,
                "Asset-Uuid": null,
              },
            });
          }
        })
      })
    })
  }


  // Mouted
  async componentDidMount() {
    // Page title
    setTitle("Vulnerability Monitoring and Triage");

    var vm = this;
    let { programUuid } = this.props['match']['params'];

    const query = new URLSearchParams(this.props.location.search);
    let component = query ? query.get('component') : null;
    //
    this.setState({
      programUuid: programUuid
    }, () => {


      httpGet(apify(`app/program/vulnerability-selects?programUuid=${programUuid}`)).then(res => {

        let internalSources = [];
        let externalSources = [];
        let triageTriggers = [];

        res['internalSources'].map(data => {
          internalSources.push({ 'label': data['name'], 'value': data['name'] })
          return null
        })
        res['externalSources'].map(data => {
          externalSources.push({ 'label': data['name'], 'value': data['name'] })
          return null
        })
        res['triageTriggers'].map(data => {
          triageTriggers.push({ 'label': data['name'], 'value': data['name'] })
          return null
        })

        vm.setState({
          loading: false,
          internalSources: internalSources,
          externalSources: externalSources,
          triageTriggers: triageTriggers,
        });
      })

      // program fetch
      httpGet(apify(`app/program/threats?programUuid=${programUuid}`)).then(res => {
        let threats = res['program']['threats'];
        let vulnerabilities = res['program']['vulnerabilities'];


        vm.setState({
          loading: false,
          program: res['program'],
          threats: threats,
          configuration: res['configuration'],
          vulnerabilities: vulnerabilities,
          vulnerabilitiesAll: res['program']['vulnerabilities'],
          uuidCounters: res['program']['vulnerabilities']['uuidCounters'] ? res['program']['vulnerabilities']['uuidCounters'] : {},
          canGotoNextPhase: false,
          component: component
        }, () => {
          this.fetchSysConf()



          // jQuery
          const jQuery = window.jQuery;
          jQuery(document).ready(function () {
            jQuery('[data-toggle="popover"]').popover({
              html: true,
              container: 'body',
              placement: 'left',
              trigger: 'click'
            });
          });

          jQuery('body').on('click', '.close-popup', function (ev) {
            jQuery('[data-toggle="popover"]').popover('hide');
          });

        });
      }).catch(err => {
        vm.setState({
          loading: false,
          program: null,
        }, () => {
          console.error(err);
        });
      });

    });
  }

  //
  popupTitleHtml = (data) => {
    let html = `
        <div class="row">
          <div class="col-8">
            <h3 class="text-primary">
              ${data}
            </h3>
          </div>
          <div class="col-4 text-right">
            <span class="close-popup">Close</span>
          </div>
        </div>
      `;
    return html;
  }


  render() {
    return (
      <DashboardLayout>
        <div className="container-fluid">

          {
            !this.state.loading &&
            <div>
              {
                this.state.program &&
                <div className="row">
                  <div className="col-12 col-md-12">
                    {

                      <div className="card">


                        <div className="card-header">

                          <div className="row">
                            <div className="col-8">
                              <h3>Vulnerability Monitoring and Triage</h3>
                              <small>Program</small> <br />
                              <Link to={programLifecycleRoute('VIEW', this.state.program['uuid'])}>
                                {this.state.program['name']}
                              </Link>
                            </div>
                            <div className="col-4 text-right mt-3">
                              <h4 className="badge badge-primary badge-v2">
                                {this.state.program['status'] === 'REJECTED' ? 'Rejected and Re-Opened ' : this.state.program['status'].replace('-', ' ')}
                              </h4>
                            </div>
                          </div>
                        </div>
                        <div className="card-body">
                          {(this.state.component || this.state.reconfigState) && <div className="row">
                            <div className="col-md-12">
                              <div className="form-group row">
                                <div className="col-5 text-muted">
                                  Components
                                </div>
                                <div className="col-7">
                                  <Select options={this.state.componentArray}
                                    value={this.state.componentName}
                                    onChange={(ev) => this.onChangeComponent(ev)}
                                  />
                                </div>
                              </div>
                            </div>
                          </div>}

                          <div className="row">
                            <div className="col-5">
                              Assets
                            </div>
                            <div className="col-7">
                              <Select
                                options={this.state.assets}
                                onChange={(ev) => this.onChangeAssetOption(ev)}
                                menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}
                                value={this.state.assetSelected}
                              />
                            </div>

                          </div>

                          {
                            (this.state.vulnerability !== undefined) &&
                            <div>
                              <div className="row mt-2">
                                <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Vulnerability Name
                                    </div>
                                    <div className="col-7">
                                      <input type="text" className="form-control md-form-control mt-2"
                                        defaultValue={this.state.vulnerability['Name']}
                                        name="Name"
                                        onChange={(ev) => this.onDataChange(ev)}
                                        placeholder="Vulnerability Name" />
                                    </div>
                                  </div>
                                </div>
                                <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Vulnerability Description
                                    </div>
                                    <div className="col-7">
                                      <input type="text" name="Description" className="form-control md-form-control mt-2" defaultValue={this.state.vulnerability['Description']}
                                        placeholder="Vulnerability Description" onChange={(ev) => this.onDataChange(ev)} />
                                    </div>
                                  </div>
                                </div>
                                <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Is this Vulnerability Internal?
                                    </div>
                                    <div className="col-7">
                                      <Select options={this.state.yesNoSelects}
                                        name="Is-Internal-Type"
                                        value={this.state.internalType}
                                        onChange={(ev) => {
                                          this.setState({
                                            vulnerability: {
                                              ...this.state.vulnerability,
                                              "Is-Internal-Type": ev.value === 'Yes' ? true : false,
                                            },
                                            internalType: ev
                                          })
                                        }} />
                                      <span className="text-danger text-error d-none" data-validation-key="groupName">Please select Group.</span>
                                    </div>
                                  </div>
                                </div>

                                {this.state.vulnerability['Is-Internal-Type'] === true && <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Internal Sources
                                    </div>
                                    <div className="col-7">
                                      <Select options={this.state.internalSources}
                                        value={this.state.InternalSource}
                                        isMulti={true}
                                        name="Internal-Source"
                                        onChange={(ev) => {
                                          this.setState({
                                            vulnerability: {
                                              ...this.state.vulnerability,
                                              "Internal-Source": ev,
                                            },
                                            InternalSource: ev
                                          })
                                        }}
                                      />
                                      <span className="text-danger text-error d-none" data-validation-key="groupName">Please select Group.</span>
                                    </div>
                                  </div>
                                </div>}
                              </div>


                              {this.state.vulnerability['Is-Internal-Type'] === true && <div className=''>
                                <div className="form-group row pt-1">
                                  <div className="col-5 text-muted">
                                    Internal Vulnerability Name
                                  </div>
                                  <div className="col-7">
                                    <input type="text" className="form-control md-form-control mt-2" defaultValue={this.state.vulnerability['Internal-Vulnerability-Name']}
                                      name="Internal-Vulnerability-Name"
                                      onChange={(ev) => this.onDataChange(ev)} placeholder="Internal Vulnerability Name" />
                                  </div>
                                </div>
                              </div>}
                              {this.state.vulnerability['Is-Internal-Type'] === true &&
                                <div className=''>
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Internal Vulnerability Description
                                    </div>
                                    <div className="col-7">
                                      <input type="text" className="form-control md-form-control mt-2" defaultValue={this.state.vulnerability['Internal-Vulnerability-Description']}
                                        name="Internal-Vulnerability-Description"
                                        onChange={(ev) => this.onDataChange(ev)} placeholder="Internal Vulnerability Description" />
                                    </div>
                                  </div>
                                </div>}
                              {this.state.vulnerability['Is-Internal-Type'] === true &&
                                <div className=''>
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Internal Vulnerability ID
                                    </div>
                                    <div className="col-7">
                                      <input type="text" className="form-control md-form-control mt-2" disabled defaultValue={this.state.vulnerability['Internal-Vulnerability-ID']} />
                                    </div>
                                  </div>
                                </div>}
                              {this.state.vulnerability['Is-Internal-Type'] === true && <div className="form-group row pt-1">
                                <div className="col-5 text-muted">
                                  Vulnerability Number/CVE Number (if applicable)
                                </div>
                                <div className="col-5">
                                  <input type="text" className="form-control md-form-control mt-2" name="Internal-CVE-Number" defaultValue={this.state.vulnerability['Internal-CVE-Number']} placeholder="Provide CVE Number" onChange={(ev) => this.onDataChange(ev)} />
                                </div>
                                <div className="col-2 text-right">
                                  <a href="https://cve.mitre.org/cve/search_cve_list.html" target="_blank" rel="noreferrer">
                                    <i className="fa fa-search mr-2"></i>
                                    Search CVE
                                  </a>
                                </div>
                              </div>}

                              <div className="row">
                                <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Is this Vulnerability External?
                                    </div>
                                    <div className="col-7">
                                      <Select options={this.state.yesNoSelects}
                                        value={this.state.externalType}
                                        name="Is-External-Type"
                                        onChange={(ev) => {
                                          this.setState({
                                            vulnerability: {
                                              ...this.state.vulnerability,
                                              "Is-External-Type": ev.value === 'Yes' ? true : false,

                                            },
                                            externalType: ev
                                          })
                                        }} />
                                      <span className="text-danger text-error d-none" data-validation-key="groupName">Please select Group.</span>
                                    </div>
                                  </div>
                                </div>

                                {this.state.vulnerability['Is-External-Type'] && <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      External Sources
                                    </div>
                                    <div className="col-7">
                                      <Select
                                        options={this.state.externalSources}
                                        value={this.state.ExternalSource}
                                        name="External-Source"
                                        isMulti={true}
                                        onChange={(ev) => {
                                          this.setState({
                                            vulnerability: {
                                              ...this.state.vulnerability,
                                              "External-Source": ev,
                                            },
                                            ExternalSource: ev
                                          })
                                        }} />
                                      <span className="text-danger text-error d-none" data-validation-key="groupName">Please select Group.</span>
                                    </div>
                                  </div>
                                </div>}
                              </div>

                              {this.state.vulnerability['Is-External-Type'] === true && <div className=''>
                                <div className="form-group row pt-1">
                                  <div className="col-5 text-muted">
                                    External Vulnerability Name
                                  </div>
                                  <div className="col-7">
                                    <input type="text" className="form-control md-form-control mt-2" defaultValue={this.state.vulnerability['External-Vulnerability-Name']}
                                      name="External-Vulnerability-Name"
                                      onChange={(ev) => this.onDataChange(ev)} placeholder="External Vulnerability Name" />
                                  </div>
                                </div>
                              </div>}
                              {this.state.vulnerability['Is-External-Type'] === true &&
                                <div className=''>
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      External Vulnerability Description
                                    </div>
                                    <div className="col-7">
                                      <input type="text" className="form-control md-form-control mt-2" defaultValue={this.state.vulnerability['External-Vulnerability-Description']}
                                        name="External-Vulnerability-Description"
                                        onChange={(ev) => this.onDataChange(ev)} placeholder="External Vulnerability Description" />
                                    </div>
                                  </div>
                                </div>}
                              {this.state.vulnerability['Is-External-Type'] === true &&
                                <div className=''>
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      External Vulnerability ID
                                    </div>
                                    <div className="col-7">
                                      <input type="text" className="form-control md-form-control mt-2" disabled defaultValue={this.state.vulnerability['External-Vulnerability-ID']} />
                                    </div>
                                  </div>
                                </div>}

                              {this.state.vulnerability['Is-External-Type'] && <div className="form-group row pt-1">
                                <div className="col-5 text-muted">
                                  Vulnerability Number/CVE Number (if applicable)
                                </div>
                                <div className="col-5">
                                  <input type="text" className="form-control md-form-control mt-2" name="External-CVE-Number" defaultValue={this.state.vulnerability['External-CVE-Number']} placeholder="Provide CVE Number" onChange={(ev) => this.onDataChange(ev)} />
                                </div>
                                <div className="col-2 text-right">
                                  <a href="https://cve.mitre.org/cve/search_cve_list.html" target="_blank" rel="noreferrer">
                                    <i className="fa fa-search mr-2"></i>
                                    Search CVE
                                  </a>
                                </div>
                              </div>}

                              {(this.state.vulnerability['Is-Internal-Type'] || this.state.vulnerability['Is-External-Type']) && <div className="row">
                                <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Triage Triggers
                                    </div>
                                    <div className="col-7">
                                      <Select
                                        options={this.state.triageTriggers}
                                        value={this.state.TriageTrigger}
                                        name="Triage-Triggers"
                                        isMulti={true}
                                        onChange={(ev) => {
                                          this.setState({
                                            vulnerability: {
                                              ...this.state.vulnerability,
                                              "Triage-Triggers": ev,
                                            },
                                            TriageTrigger: ev
                                          })
                                        }} />
                                      <span className="text-danger text-error d-none" data-validation-key="groupName">Please select Group.</span>
                                    </div>
                                  </div>
                                </div>

                                <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Triage Description
                                    </div>
                                    <div className="col-7">
                                      <input type="text" className="form-control md-form-control mt-2" name="Triage-Description" defaultValue={this.state.vulnerability['Triage-Description']} placeholder="Triage Description" onChange={(ev) => this.onDataChange(ev)} />
                                    </div>
                                  </div>
                                </div>


                                <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Triage ID
                                    </div>
                                    <div className="col-7">
                                      <input type="text" className="form-control md-form-control mt-2" defaultValue={this.state.vulnerability['Triage-ID']} disabled placeholder="" />
                                    </div>
                                  </div>
                                </div>

                                <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Cyber Security Event
                                    </div>
                                    <div className="col-7">
                                      <input type="text" className="form-control md-form-control mt-2" name="CyberSecurity-Event" defaultValue={this.state.vulnerability['CyberSecurity-Event']} placeholder="Cyber Security Event" onChange={(ev) => this.onDataChange(ev)} />
                                    </div>
                                  </div>
                                </div>


                                <div className="col-md-12">
                                  <div className="form-group row pt-1">
                                    <div className="col-5 text-muted">
                                      Cyber Security Event ID
                                    </div>
                                    <div className="col-7">
                                      <input type="text" className="form-control md-form-control mt-2" defaultValue={this.state.vulnerability['CyberSecurity-Event-ID']} disabled placeholder="" />
                                    </div>
                                  </div>
                                </div>

                              </div>}


                            </div>
                          }

                        </div>
                        <div className="card-footer">
                          <button type="button" className="btn btn-success btn-lg" onClick={() => this.onSubmit()}>
                            Add to Vulnerabilities
                          </button>
                        </div>

                      </div>
                    }


                  </div>

                  <div className="col-12 col-md-12 mt-5">
                    <div className="card">
                      <div className="card-header">
                        <h3>List of Vulnerabilities</h3>
                      </div>
                      <div className="card-body p-0">
                        <table className="table table-bordered">
                          <thead>
                            <tr>
                              <th className="text-left">Vulnerability</th>
                              <th className="text-left">Internal Type</th>
                              <th className="text-left">External Type</th>
                              <th className="text-left">Added time</th>
                              <th></th>
                            </tr>
                          </thead>
                          <tbody>
                            {/* No Threats */}
                            {
                              this.state.vulnerabilities && this.state.vulnerabilities['Items'].length === 0
                              &&
                              <tr className="text-center">
                                <td colSpan="5">
                                  No Vulnerabilities added yet.
                                </td>
                              </tr>
                            }

                            {/* Vulnerabilities */}
                            {
                              this.state.vulnerabilities && this.state.vulnerabilities['Items'].map(vulnerability => {
                                return (
                                  <tr key={vulnerability['RefId']}>
                                    <td><span data-toggle="popover" title={this.popupTitleHtml(vulnerability['Name'])} data-html="true" data-content={this.vulDeatils(vulnerability)}>{vulnerability['Name']}</span>
                                    </td>
                                    <td>{vulnerability['Is-Internal-Type'] ? <span class="badge badge-success badge-v2">True</span> : <span class="badge badge-danger badge-v2"> False</span>}</td>
                                    <td>{vulnerability['Is-External-Type'] ? <span class="badge badge-success badge-v2">True</span> : <span class="badge badge-danger badge-v2"> False</span>}</td>
                                    <td>{vulnerability['Added-Time']}</td>
                                    <td className="text-right">
                                      <a href="#!" className="identified-vulnerability-configure-button" data-ref-id={vulnerability['Uuid']} onClick={() => this.reConfigure(vulnerability)}>
                                        <i className="fa fa-gear mr-1"></i>
                                        Re-Configure
                                      </a>
                                    </td>

                                  </tr>
                                )
                              })
                            }
                          </tbody>
                        </table>
                      </div>

                      <div className="card-footer">
                        {false && <div className="has-checkbox mb-3">
                          <input type="checkbox" className="mr-2" onChange={(event) => {
                            this.setState({
                              saveAndContinue: event.currentTarget.checked
                            })
                          }} />
                          <label>You are about to make the final submission for the vulnerabilities.</label>
                        </div>}
                        <button className="btn btn-success" onClick={() => this.saveAndContinue()}>
                          Save and Continue
                          <i className="fa fa-chevron-right ml-2"></i>
                        </button>
                      </div>

                    </div>
                  </div>
                </div>
              }
            </div>
          }
        </div>

      </DashboardLayout>
    )
  }

}

export default Monitoring


